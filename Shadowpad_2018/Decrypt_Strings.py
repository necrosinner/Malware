import idaapi
import idautils
import idc
import ida_search
import re
import string

start = -1
Func_Ea = []
end = 0

for s in idautils.Segments():
    segend = idc.get_segm_end(s)
    if segend > end:
        end = segend

while True:
    #Find Decryption Subroutines
    start = idc.find_binary(start+1, SEARCH_DOWN, "55 8b ec 51 53 56 57 68 00 10 00 00 8b f8")
    if (start > end or start < 0):
        break
    Func_Ea.append(start)

print("found {} decryption subroutines".format(len(Func_Ea)))

xref_lists=[]
#Get all xrefs for each decryption subroutine
for func in Func_Ea:
    xrefs = []
    for ref in idautils.XrefsTo(func):
        xrefs.append(ref.frm)
    xref_lists.append(xrefs)

print("found xref_lists")

xref_eax_dict = {}
#Get all mov eax values of xrefs
#key = xref, value = start address of encrypted data (UNK block)
#If address is outside of our segments, unable to decrypt string
for funcxrefs in xref_lists:
    for xref in funcxrefs:
        prev_ins = ida_search.find_code(xref, SEARCH_UP | SEARCH_NEXT)
        count = 1
        while (count < 5):
            prev_ins = ida_search.find_code(prev_ins, SEARCH_UP | SEARCH_NEXT)
            mnem = idc.print_insn_mnem(prev_ins)
            if mnem == 'mov':
                src_addr = idc.get_operand_value(prev_ins,1)
                #Not valid addresses
                if(src_addr > end or src_addr < 0x20000):
                    print("Unable to decrypt string at " + str(hex(xref)))
                    xref_eax_dict[xref] = None
                else:
                    xref_eax_dict[xref] = src_addr
                break
            else:
                count+=1
            if(count == 4): print("Unable to decrypt string at " + str(hex(xref)))

def getNullTerminatedString(lst):
    tempstring = ''
    for char in lst:
        if(char != 0):
            tempstring += char.to_bytes(1,'big').decode('UTF-8')
            continue
        return tempstring

for key in xref_eax_dict:
    ptr = xref_eax_dict[key]
    if ptr != None:
    #init registers/variables/count/array
        v1 = 0
        v2 = 0
        v3 = 0
        v4 = 0
        count = 0
        bytearr = [None] * 4096
        v1 = idaapi.get_byte(ptr)
        v2 = idaapi.get_byte(ptr+1)
        v2 = v2 << 8
        v3 = v2 | v1
        ptr += 2
        while (count < 4090):
            v4 = idaapi.get_byte(ptr)
            v4 = v3 ^ v4
            bytearr[count] = v4 & 0x000000FF
            print(str(hex(bytearr[count])))
            v3 = (v3 * 0x208B0000) & 0xFFFFFFFF
            print(str(hex(v3)))
            v4 = v4 >> 16
            v4 = (v4 * 0x1447208B) & 0xFFFFFFFF
            print(str(hex(v4)))
            v3 = (v3 + v4 - 0x4875A15) & 0xFFFFFFFF
            print(str(hex(v3)))
            v4 = 0
            count+=1
            ptr += 1
            if (bytearr[count-1] == 0x0):
                print("String Found ",end='')
                string = getNullTerminatedString(bytearr)
                idc.set_cmt(key, string, 1)
                break


